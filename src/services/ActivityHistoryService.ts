import AsyncStorage from '@react-native-async-storage/async-storage';
import { Activity, ActivityHistory } from '../types/types';
import { eachDayOfInterval, startOfDay, subDays } from 'date-fns';
import { shouldShowActivity } from '../utils/activityFilters';

const HISTORY_STORAGE_KEY = 'activity-history';
const BATCH_SIZE = 3;

export class ActivityHistoryService {
    static async getHistoryForDateRange(startDate: Date, endDate: Date): Promise<ActivityHistory[]> {
        const dates = eachDayOfInterval({ start: startDate, end: endDate });
        const histories: ActivityHistory[] = [];

        for (const date of dates) {
            const dayHistory = await this.getHistoryForDate(date);
            histories.push(...dayHistory);
        }

        return histories;
    }

    static async getHistoryForDate(date: Date): Promise<ActivityHistory[]> {
        try {
            const key = `${HISTORY_STORAGE_KEY}-${date.toISOString().split('T')[0]}`;
            const data = await AsyncStorage.getItem(key);
            return data ? JSON.parse(data) : [];
        } catch (error) {
            console.error('Error getting history:', error);
            return [];
        }
    }

    static async setHistoryForDate(date: Date, history: ActivityHistory[]): Promise<void> {
        const key = `${HISTORY_STORAGE_KEY}-${date.toISOString().split('T')[0]}`;
        await AsyncStorage.setItem(key, JSON.stringify(history));
    }

    static async generateHistoryForActivity(activity: Activity, date: Date): Promise<ActivityHistory> {
        return {
            id: `${activity.id}-${date.toISOString()}`,
            activityId: activity.id,
            targetDate: date.toISOString(),
            storedAt: new Date().toISOString(),
            isDone: false,
            isAutoGenerated: true
        };
    }

    static async initializeMissingHistory(activities: Activity[]): Promise<void> {
        const today = startOfDay(new Date());
        const twoWeeksAgo = subDays(today, 14);
        
        // Split dates into batches
        const dateRange = eachDayOfInterval({ start: twoWeeksAgo, end: today });
        const dateBatches: Date[][] = [];
        for (let i = 0; i < dateRange.length; i += BATCH_SIZE) {
            dateBatches.push(dateRange.slice(i, i + BATCH_SIZE));
        }

        // Process batches with setTimeout
        const processBatch = async (batchIndex: number) => {
            if (batchIndex >= dateBatches.length) {
                console.log('History initialization completed');
                return;
            }

            const batch = dateBatches[batchIndex];
            const batchOperations = await Promise.all(batch.map(async date => {
                const existingHistory = await this.getHistoryForDate(date);
                const existingActivityIds = new Set(existingHistory.map(h => h.activityId));

                const missingActivities = activities.filter(activity => {
                    const createdDate = startOfDay(new Date(activity.createdAt));
                    return shouldShowActivity(activity, date) && 
                           !existingActivityIds.has(activity.id) &&
                           date >= createdDate;
                });

                if (missingActivities.length === 0) return null;

                return {
                    date,
                    history: [
                        ...existingHistory,
                        ...await Promise.all(missingActivities.map(activity => 
                            this.generateHistoryForActivity(activity, date)
                        ))
                    ]
                };
            }));

            // Save batch results
            await Promise.all(
                batchOperations
                    .filter((op): op is NonNullable<typeof op> => op !== null)
                    .map(op => this.setHistoryForDate(op.date, op.history))
            );

            // Schedule next batch with a delay
            setTimeout(() => processBatch(batchIndex + 1), 100);
        };

        // Start processing first batch
        processBatch(0);
    }

    static async clearAllHistory(): Promise<void> {
        try {
            const keys = await AsyncStorage.getAllKeys();
            const historyKeys = keys.filter(key => key.startsWith(HISTORY_STORAGE_KEY));
            await AsyncStorage.multiRemove(historyKeys);
        } catch (error) {
            console.error('Error clearing history:', error);
        }
    }
} 