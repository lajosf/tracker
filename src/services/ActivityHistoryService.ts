import AsyncStorage from '@react-native-async-storage/async-storage';
import { Activity, ActivityHistory } from '../types/types';
import { eachDayOfInterval, startOfDay, subDays } from 'date-fns';
import { shouldShowActivity } from '../utils/activityFilters';

const HISTORY_STORAGE_KEY = 'activity-history';

export class ActivityHistoryService {
    static async getHistoryForDateRange(startDate: Date, endDate: Date): Promise<ActivityHistory[]> {
        const dates = eachDayOfInterval({ start: startDate, end: endDate });
        const histories: ActivityHistory[] = [];

        for (const date of dates) {
            const dayHistory = await this.getHistoryForDate(date);
            histories.push(...dayHistory);
        }

        return histories;
    }

    static async getHistoryForDate(date: Date): Promise<ActivityHistory[]> {
        try {
            const key = `${HISTORY_STORAGE_KEY}-${date.toISOString().split('T')[0]}`;
            const data = await AsyncStorage.getItem(key);
            return data ? JSON.parse(data) : [];
        } catch (error) {
            console.error('Error getting history:', error);
            return [];
        }
    }

    static async setHistoryForDate(date: Date, history: ActivityHistory[]): Promise<void> {
        const key = `${HISTORY_STORAGE_KEY}-${date.toISOString().split('T')[0]}`;
        await AsyncStorage.setItem(key, JSON.stringify(history));
    }

    static async generateHistoryForActivity(activity: Activity, date: Date): Promise<ActivityHistory> {
        return {
            id: `${activity.id}-${date.toISOString()}`,
            activityId: activity.id,
            targetDate: date.toISOString(),
            storedAt: new Date().toISOString(),
            isDone: false,
            isAutoGenerated: true
        };
    }

    static async initializeMissingHistory(activities: Activity[]): Promise<void> {
        const today = startOfDay(new Date());
        const sevenDaysAgo = subDays(today, 7);
        const dateRange = eachDayOfInterval({ start: sevenDaysAgo, end: today });

        const batchOperations = await Promise.all(dateRange.map(async date => {
            const existingHistory = await this.getHistoryForDate(date);
            const existingActivityIds = new Set(existingHistory.map(h => h.activityId));

            const missingActivities = activities.filter(activity =>
                shouldShowActivity(activity, date) && !existingActivityIds.has(activity.id)
            );

            if (missingActivities.length === 0) return null;

            return {
                date,
                history: [
                    ...existingHistory,
                    ...missingActivities.map(activity => ({
                        id: `${activity.id}-${date.toISOString()}`,
                        activityId: activity.id,
                        targetDate: date.toISOString(),
                        storedAt: new Date().toISOString(),
                        isDone: false,
                        isAutoGenerated: true
                    }))
                ]
            };
        }));

        await Promise.all(
            batchOperations
                .filter((op): op is NonNullable<typeof op> => op !== null)
                .map(op => this.setHistoryForDate(op.date, op.history))
        );
    }
} 